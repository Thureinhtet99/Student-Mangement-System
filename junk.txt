generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Student {
  id          String     @id @default(cuid())
  username    String     @unique
  name        String
  email       String?    @unique
  phone       String?    @unique
  address     String?
  gender      UserGender
  birthday    DateTime?
  image       String?
  bloodType   String?
  studentId   String?    @unique // Student ID number
  enrollmentDate DateTime @default(now())
  status      StudentStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parentId    String?
  parent      Parent?      @relation(fields: [parentId], references: [id])
  classId     Int?
  class       Class?       @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  
  attendances Attendance[]
  results     Result[]
  fees        Fee[]

  @@map("students")
}

model Teacher {
  id          String     @id @default(cuid())
  username    String     @unique
  name        String
  email       String     @unique
  phone       String?    @unique
  address     String?
  gender      UserGender
  birthday    DateTime?
  image       String?
  qualification String?
  experience  Int? // years of experience
  salary      Decimal?
  hireDate    DateTime   @default(now())
  status      TeacherStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  subjects    Subject[]
  classes     Class[]
  lessons     Lesson[]
  schedules   Schedule[]

  @@map("teachers")
}

model Parent {
  id          String   @id @default(cuid())
  username    String   @unique
  name        String
  email       String?  @unique
  phone       String?  @unique
  address     String?
  occupation  String?
  relationship ParentRelation @default(FATHER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  students Student[]

  @@map("parents")
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int      @default(30)
  section   String?
  room      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeId   Int
  grade     Grade    @relation(fields: [gradeId], references: [id])
  teacherId String?  // Class teacher
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  
  lessons       Lesson[]
  students      Student[]
  events        Event[]
  announcements Announcement[]
  attendances   Attendance[]
  schedules     Schedule[]

  @@map("classes")
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique // Subject code like "MATH101"
  description String?
  credits     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teachers  Teacher[]
  lessons   Lesson[]
  exams     Exam[]
  schedules Schedule[]

  @@map("subjects")
}

model Grade {
  id        Int      @id @default(autoincrement())
  level     Int      @unique // 1, 2, 3, etc.
  name      String   @unique // "Grade 1", "Grade 2", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
  classes  Class[]

  @@map("grades")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  duration    Int      @default(60) // minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]

  @@map("lessons")
}

model Schedule {
  id        Int      @id @default(autoincrement())
  day       Day
  startTime String   // "09:00"
  endTime   String   // "10:00"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@unique([day, startTime, classId])
  @@unique([day, startTime, teacherId])
  @@map("schedules")
}

model Exam {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  startTime   String
  endTime     String
  totalMarks  Int      @default(100)
  passingMarks Int     @default(40)
  type        ExamType @default(REGULAR)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  
  results Result[]

  @@map("exams")
}

model Assignment {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  totalMarks  Int       @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  
  results Result[]

  @@map("assignments")
}

model Result {
  id           Int      @id @default(autoincrement())
  score        Decimal
  obtainedMarks Int
  totalMarks   Int
  percentage   Decimal?
  grade        String?  // A, B, C, D, F
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])

  @@unique([studentId, examId])
  @@unique([studentId, assignmentId])
  @@map("results")
}

model Attendance {
  id        Int            @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  remarks   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  classId   Int?
  class     Class?  @relation(fields: [classId], references: [id])
  lessonId  Int?
  lesson    Lesson? @relation(fields: [lessonId], references: [id])

  @@unique([studentId, date, lessonId])
  @@map("attendances")
}

model Fee {
  id          Int       @id @default(autoincrement())
  amount      Decimal
  type        FeeType
  dueDate     DateTime
  paidDate    DateTime?
  status      FeeStatus @default(PENDING)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@map("fees")
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  type        EventType @default(GENERAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])

  @@map("events")
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime  @default(now())
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])

  @@map("announcements")
}

// Enums
enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum ParentRelation {
  FATHER
  MOTHER
  GUARDIAN
  OTHER
}

enum ExamType {
  REGULAR
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeType {
  TUITION
  LIBRARY
  LABORATORY
  SPORTS
  TRANSPORT
  OTHER
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum EventType {
  GENERAL
  ACADEMIC
  SPORTS
  CULTURAL
  MEETING
  HOLIDAY
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}