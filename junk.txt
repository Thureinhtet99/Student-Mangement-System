npm install firebase

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyD7ZK2AHBtvt2UeApitxrz3YMIVHzY23kE",
  authDomain: "personal-projects-a904f.firebaseapp.com",
  projectId: "personal-projects-a904f",
  storageBucket: "personal-projects-a904f.firebasestorage.app",
  messagingSenderId: "886854965790",
  appId: "1:886854965790:web:7e2fd986155ed5ed6fec0f",
  measurementId: "G-Z5BD04WX8T"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);




// ...existing code...

const form = useForm<Inputs>({
  resolver: zodResolver(parentFormSchema),
  defaultValues: {
    username: data?.username || "",
    email: data?.email || "",
    password: data?.password || "",
    name: data?.name || "",
    phone: data?.phone || "",
    address: data?.address || "",
    students: data?.students?.map((t: any) => t.id) || [],
  },
});

// ...existing code...

                  <div className="space-y-8">
                    <FormField
                      control={form.control}
                      name="students"
                      render={({ field }) => (
                        <FormItem className="space-y-2">
                          <FormLabel>Students</FormLabel>
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button
                                variant="outline"
                                className="w-full justify-between"
                                type="button"
                              >
                                <span>
                                  {selectedStudents.length > 0
                                    ? `${selectedStudents.length} student${
                                        selectedStudents.length > 1 ? "s" : ""
                                      } selected`
                                    : "Select students"}
                                </span>
                                <Search className="h-4 w-4 ml-2 opacity-50" />
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="sm:max-w-[425px]">
                              <DialogHeader>
                                <DialogTitle>Select Students</DialogTitle>
                              </DialogHeader>
                              <div className="py-4">
                                <div className="relative mb-4">
                                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                                  <Input
                                    placeholder="Search students..."
                                    value={studentSearchQuery}
                                    onChange={(e) =>
                                      setStudentSearchQuery(e.target.value)
                                    }
                                    className="pl-8"
                                  />
                                </div>
                                <ScrollArea className="h-[300px] pr-4">
                                  {filteredStudents.length === 0 ? (
                                    <p className="text-center text-muted-foreground py-4">
                                      No students found
                                    </p>
                                  ) : (
                                    <div className="space-y-3">
                                      {filteredStudents.map((student: any) => (
                                        <div
                                          key={student.id}
                                          className="flex items-center space-x-2 p-2 rounded-md hover:bg-muted/50"
                                        >
                                          <Checkbox
                                            id={`student-${student.id}`}
                                            checked={selectedStudents.includes(
                                              student.id
                                            )}
                                            onCheckedChange={() => {
                                              toggleStudentSelection(student.id);
                                              field.onChange(
                                                selectedStudents.includes(student.id)
                                                  ? selectedStudents.filter(id => id !== student.id)
                                                  : [...selectedStudents, student.id]
                                              );
                                            }}
                                          />
                                          <label
                                            htmlFor={`student-${student.id}`}
                                            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1"
                                          >
                                            {student.name}
                                          </label>
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                </ScrollArea>
                              </div>
                              <DialogFooter>
                                <DialogClose asChild>
                                  <Button type="button">Done</Button>
                                </DialogClose>
                              </DialogFooter>
                            </DialogContent>
                          </Dialog>
                          {selectedStudents.length > 0 && (
                            <div className="flex flex-wrap gap-2 max-h-[100px] overflow-y-auto p-1">
                              {selectedStudents.map((studentId) => {
                                const student = students.find(
                                  (s: any) => s.id === studentId
                                );
                                return (
                                  <Badge
                                    key={studentId}
                                    variant="secondary"
                                    className="flex items-center gap-1 py-1.5"
                                  >
                                    {student?.name}
                                    <X
                                      className="h-3 w-3 cursor-pointer ml-1"
                                      onClick={() => {
                                        removeStudent(studentId);
                                        field.onChange(
                                          selectedStudents.filter(id => id !== studentId)
                                        );
                                      }}
                                    />
                                  </Badge>
                                );
                              })}
                            </div>
                          )}
                          <FormMessage />
                          <FormDescription>
                            Select the students of this parent
                          </FormDescription>
                        </FormItem>
                      )}
                    />
                  </div>

// ...existing code...

  const toggleStudentSelection = (studentId: string) => {
    const newSelection = selectedStudents.includes(studentId)
      ? selectedStudents.filter((id) => id !== studentId)
      : [...selectedStudents, studentId];
    
    setSelectedStudents(newSelection);
    form.setValue("students", newSelection);
  };

  const removeStudent = (studentId: string) => {
    const newSelection = selectedStudents.filter((id) => id !== studentId);
    setSelectedStudents(newSelection);
    form.setValue("students", newSelection);
  };

// ...existing code...


className="w-2/12 min-w-2/12 max-w-2/12"

<TableCell className="hidden md:table-cell">
        {/* {item.class.name} */}-
      </TableCell>
      <TableCell className="hidden lg:table-cell">
        {/* {item.class.teacher?.name} */}-
      </TableCell>


 password: z
    .string()
    .optional()
    .or(
      z.string().min(8, { message: "Password must be at least 8 characters" })
    ),


        revalidatePath(`${ROUTE_CONFIG.TEACHER_LIST}`);


npx tsc --noEmit
w-full p-0

await prisma.user.update({
  where: { id: 1 },
  data: {
    bio: null       // ✅ bio will be cleared (set to null)
    // bio: undefined // ✅ bio will be left unchanged
  }
});
