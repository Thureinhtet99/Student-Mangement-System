generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String     @id
  username  String     @unique
  name      String
  email     String?    @unique
  phone     String?    @unique
  address   String?
  bloodType String?
  image     String?
  gender    UserGender
  birthday  DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  parentId    String?
  parent      Parent?      @relation(fields: [parentId], references: [id])
  classId     Int?
  class       Class?       @relation(fields: [classId], references: [id])
  gradeId     Int?
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        String     @id
  username  String     @unique
  name      String
  email     String?    @unique
  phone     String?    @unique
  address   String?
  image     String?
  gender    UserGender
  birthday  DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  subjects Subject[]
  classes  Class[]
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  email     String?  @unique
  phone     String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int?

  teacherId     String?
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  lessons       Lesson[]
  students      Student[]
  events        Event[]
  announcements Announcement[]
  attendances   Attendance[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique

  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id   Int    @id @default(autoincrement())
  name String

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  // attendances Attendance[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id      Int       @id @default(autoincrement())
  title   String
  dueDate DateTime?

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id        Int      @id @default(autoincrement())
  score     Int
  comments  String?
  createdAt DateTime @default(now())

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  // lessonId  Int
  // lesson    Lesson  @relation(fields: [lessonId], references: [id])
  classId   Int?
  Class     Class?  @relation(fields: [classId], references: [id])
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime?
  endTime     DateTime?

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime?

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
