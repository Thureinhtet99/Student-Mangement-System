generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  username  String?  @unique
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id        String     @id @default(uuid())
  username  String?    @unique
  name      String
  email     String?    @unique
  password  String?
  phone     String?    @unique
  address   String?
  gender    UserGender
  birthday  DateTime?
  image     String?
  role      UserRole   @default(TEACHER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  subjects Subject[]
  classes  Class[]
}

model Student {
  id        String     @id @default(uuid())
  username  String?    @unique
  name      String
  email     String?    @unique
  password  String?
  phone     String?    @unique
  address   String?
  gender    UserGender
  birthday  DateTime?
  image     String?
  role      UserRole   @default(STUDENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  parentId String?
  parent   Parent? @relation(fields: [parentId], references: [id])
  classId  Int?
  class    Class?  @relation(fields: [classId], references: [id])
  gradeId  Int?
  grade    Grade?  @relation(fields: [gradeId], references: [id])

  attendances Attendance[]
  results     Result[]
}

model Parent {
  id        String   @id @default(uuid())
  username  String?  @unique
  name      String
  email     String?  @unique
  password  String?
  phone     String?  @unique
  address   String?
  role      UserRole @default(PARENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  students      Student[]
  subjects      Subject[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])

  teachers    Teacher[]
  lessons     Lesson[]
  assignments Assignment[]
  exams       Exam[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  present   Boolean
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
}

model Assignment {
  id        Int       @id @default(autoincrement())
  name      String
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])

  results Result[]
}

model Exam {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])

  results Result[]
}

model Result {
  id        Int      @id @default(autoincrement())
  score     Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String?
  student      Student?    @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Grade {
  id        Int      @id @default(autoincrement())
  level     Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String?
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String
  receiverId String
}

enum UserGender {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
